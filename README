KeyB - Keyboard event handler

ABOUT
===============================
KeyB was originally built as helper to create smooth object movement
by keyboard interaction (see example to see result)

KeyB allows:
 * set keyCode aliases (no need to use keyCodes in your code)
 * set same key alias for multiple keys (multiple keys tirgger same event)
 * check if any defined key is currently down or not
 * attach keyDown events to certain keys (no need to check what key was pressed in function)

METHODS
===============================
setAliases
Set keyCode - keyAlias mapping
@param array/object KeyCode - keyAlias mapping
where array/object key is keyCode and value is key Alias name

startListening/stopListening
Start listening to keyDown/KeyUp events,
if KeyB is not listening the alias keys are not marked as down
and attached events are not executed.

attachKeyDownEvent/attachKeyUpEvent
Execute function when KeyDown/KeyUp event occures for Alias key
@param string Key Alias
@param function Function to be executed
@return void

deattachKeyDownEvent/deattachKeUpEvent
Remove function attached to key Alias by attachKeyDownEvent/attachKeyUpEvent
@param string Key Alias
@param function Function that was attached
@return void

attachEvent
Execute function on any keyDown/keyUp event
But only for keys that have been defined in Alias list
@param function Function to attach
@return void

deattachEvent
Remove function attached by attachEvent
@param function Function that was attached
@return void

---

All attached events executed with 2 params
@param string Key Alias name
@param boolean True if triggered by keyDown event False if by keyUp event

USAGE
===============================
// set aliases
// NOTE: this is the only place keyCodes are set, after this point all actions are done using aliases
keyb.setAliases({37: 'left', 38: 'up', 39: 'right', 40: 'down'});

// NOTE: You can have multiple keyCodes trigger the same alias (event):
keyb.setAliases({
	37: 'left',   // left arrow key
	65: 'left',   // a key
 
	38: 'up',     // up arrow key
	87: 'up',     // w key
 
	39: 'right',  // right arrow key
	68: 'right'   // d key
 
	40: 'down',   // down arrow key
	83: 'down',   // s key
});
 
// start listening to document keyUp keyDown events
keyb.startListening();
 
// attach an event to the right arrow key right arrow key
keyb.attachKeyDownEvent('right', function() {
	$('#debug').html('Key Down event executed for <b>right<b/> arrow key');
});
 
// check if right arrow key is down
// NOTE: the keyb.down value for a key is undefined until the key is pressed,
//       after that value is true if key is down, false if key up
if (keyb.down['right']) {
	// yes right arrow key is down
} else {
	// no right arrow key is not down
}
 
// stop listening to keyEvents (the keyb variable won't be updated after this)
keyb.stopListening();
 
// deattach event (attach fn1, fn2, fn3 - deattach fn2 - only fn1 and fn3 are executed on keyDown event)
keyb.attachKeyDownEvent('up', fn1);
keyb.attachKeyDownEvent('up', fn2);
keyb.attachKeyDownEvent('up', fn3);
 
keyb.deattachKeyDownEvent('up', fn2);
 
 
// misc example:
keyhit = function(key) {
	// heh funny but seems that if more that 2 arrow keys are down, only the first 2 are registered
	var msg = 'key '+key+' was pressed <br>'+
	          'down arrow key is currently ' + (keyb.down['down'] ? '<b>down</b>' : 'up') + '<br>' +
	          'left arrow key is currently ' + (keyb.down['left'] ? '<b>down</b>' : 'up') + '<br>' +
	          'right arrow key is currently ' + (keyb.down['right'] ? '<b>down</b>' : 'up') + '<br>' +
	          'up arrow key is currently ' + (keyb.down['up'] ? '<b>down</b>' : 'up');
	$('#debug').html(msg);
};
keyb.attachKeyDownEvent('down', keyhit);
keyb.attachKeyDownEvent('left', keyhit);
keyb.attachKeyDownEvent('up', keyhit);
